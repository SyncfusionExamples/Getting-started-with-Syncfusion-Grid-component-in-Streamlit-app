{"version":3,"sources":["styles lazy /^/.*/.css$/ groupOptions: {} namespace object","ej2-grid.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","EJ2Grid","props","gridInstance","renderColumns","data","headerText","clipMode","format","textAlign","width","isPrimaryKey","columns","key","columnDirective","args","params","column","undefined","directive","field","push","toolbarClick","item","text","pdfExport","excelExport","csvExport","render","totalColumns","licenseKey","console","log","registerLicense","ref","grid","dataSource","toolbar","toolbarItems","bind","allowExcelExport","allowKeyboard","allowMultiSorting","allowPdfExport","allowReordering","allowRowDragAndDrop","allowSelection","allowTextWrap","enableAdaptiveUI","enableColumnVirtualization","enableHeaderFocus","enableHover","enableImmutableMode","enableInfiniteScrolling","infiniteScrollSettings","enablePersistence","enableStickyHeader","enableVirtualMaskRow","enableVirtualization","showColumnChooser","showColumnMenu","childGrid","editSettings","allowGrouping","groupSettings","allowPaging","pageSettings","allowFiltering","filterSettings","allowSorting","sortSettings","searchSettings","selectionSettings","textWrapSettings","allowResizing","height","rowHeight","rowRenderingMode","selectedRowIndex","printMode","frozenColumns","gridLines","frozenRows","services","Page","Sort","Filter","Group","Toolbar","InfiniteScroll","ExcelExport","PdfExport","Reorder","Resize","RowDD","Edit","Freeze","Search","DetailRow","ColumnChooser","ColumnMenu","theme","state","refreshed","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.587f28a2.chunk.js","sourcesContent":["var map = {\n\t\"./bootstrap-dark.css\": [\n\t\t95,\n\t\t3\n\t],\n\t\"./bootstrap.css\": [\n\t\t96,\n\t\t4\n\t],\n\t\"./bootstrap4.css\": [\n\t\t97,\n\t\t5\n\t],\n\t\"./bootstrap5-dark.css\": [\n\t\t98,\n\t\t6\n\t],\n\t\"./bootstrap5.css\": [\n\t\t99,\n\t\t7\n\t],\n\t\"./fabric-dark.css\": [\n\t\t100,\n\t\t8\n\t],\n\t\"./fabric.css\": [\n\t\t101,\n\t\t9\n\t],\n\t\"./fluent-dark.css\": [\n\t\t102,\n\t\t10\n\t],\n\t\"./fluent.css\": [\n\t\t103,\n\t\t11\n\t],\n\t\"./high-contrast.css\": [\n\t\t104,\n\t\t12\n\t],\n\t\"./material-dark.css\": [\n\t\t105,\n\t\t13\n\t],\n\t\"./material.css\": [\n\t\t106,\n\t\t14\n\t],\n\t\"./tailwind-dark.css\": [\n\t\t107,\n\t\t15\n\t],\n\t\"./tailwind.css\": [\n\t\t108,\n\t\t16\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 93;\nmodule.exports = webpackAsyncContext;","import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { ClipMode, ColumnChooser, ColumnDirective, ColumnMenu, ColumnsDirective, Edit, Filter, Freeze, GridComponent, Group, InfiniteScroll, PdfExport, Reorder, Resize, RowDD, Search, TextAlign, Toolbar } from '@syncfusion/ej2-react-grids';\nimport { Inject, ExcelExport, DetailRow, Page, Sort } from '@syncfusion/ej2-react-grids';\nimport { DateFormatOptions, NumberFormatOptions, registerLicense } from \"@syncfusion/ej2-base\";\nimport { ClickEventArgs, ContextMenu } from \"@syncfusion/ej2-navigations\";\n\ninterface State {\n  refreshed: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nexport class EJ2Grid extends StreamlitComponentBase<State> {\n\n  constructor( props: any ) {\n    super(props);\n    import('./styles/' + this.props.args.params.theme +'.css');\n    this.state = { refreshed: 1 }\n  }\n\n  private gridInstance: GridComponent | null = null;\n\n  public renderColumns = (data: object[]): any[] => {\n    let columns: any[] = [];\n    let key: number = 0;\n    let columnDirective = this.props.args.params.columnDirective;\n    let headerText: string;\n    let clipMode: ClipMode | undefined;\n    let format: string | NumberFormatOptions | DateFormatOptions | undefined;\n    let textAlign: TextAlign | undefined;\n    let width: string | number | undefined;\n    let isPrimaryKey: boolean | undefined;\n    for (let column of Object.keys(data[0])) {\n      format = undefined;\n      textAlign = undefined;\n      headerText = column;\n      clipMode = undefined;\n      width = undefined;\n      isPrimaryKey = false;\n      if (this.props.args.params.columnDirective) {\n        for (let directive of columnDirective) {\n          if (directive.field === column) {\n            headerText = directive.headerText;\n            clipMode = directive.clipMode;\n            format = directive.format ? directive.format : '';\n            textAlign = directive.textAlign;\n            width = directive.width;\n            isPrimaryKey = directive.isPrimaryKey;\n          }\n        }\n      }\n      columns.push(<ColumnDirective field={column} headerText={headerText} format={format} textAlign={textAlign} width={width} clipMode={clipMode} isPrimaryKey={isPrimaryKey} key={key++} />);\n    }\n    return columns;\n  }\n\n  public toolbarClick = (args: ClickEventArgs): void => {\n    switch (args.item.text) {\n      case 'PDF Export':\n        this.gridInstance?.pdfExport();\n        break;\n      case 'Excel Export':\n        this.gridInstance?.excelExport();\n        break;\n      case 'CSV Export':\n        this.gridInstance?.csvExport();\n        break;\n    }\n  }\n\n  public render = (): ReactNode => {\n\n    const totalColumns: any[] = this.renderColumns(this.props.args.params.data);\n\n    if (this.props.args.params.licenseKey) {\n      console.log('license provided');\n      registerLicense(this.props.args.params.licenseKey);\n    }\n\n\n    return (\n      <GridComponent ref={grid => this.gridInstance = grid}\n        dataSource={ this.props.args.params.data }\n        toolbar={ this.props.args.params.toolbarItems }\n        toolbarClick={this.toolbarClick.bind(this)}\n        allowExcelExport={ this.props.args.params.allowExcelExport }\n        allowKeyboard={ this.props.args.params.allowKeyboard }\n        allowMultiSorting={ this.props.args.params.allowMultiSorting }\n        allowPdfExport={ this.props.args.params.allowPdfExport }\n        allowReordering={ this.props.args.params.allowReordering }\n        allowRowDragAndDrop={ this.props.args.params.allowRowDragAndDrop }\n        allowSelection={ this.props.args.params.allowSelection }\n        allowTextWrap={ this.props.args.params.allowTextWrap }\n        enableAdaptiveUI={ this.props.args.params.enableAdaptiveUI }\n        enableColumnVirtualization={ this.props.args.params.enableColumnVirtualization }\n        enableHeaderFocus={ this.props.args.params.enableHeaderFocus }\n        enableHover={ this.props.args.params.enableHover }\n        enableImmutableMode={ this.props.args.params.enableImmutableMode }\n        enableInfiniteScrolling={ this.props.args.params.enableInfiniteScrolling } infiniteScrollSettings={ this.props.args.params.infiniteScrollSettings }\n        enablePersistence={ this.props.args.params.enablePersistence }\n        enableStickyHeader={ this.props.args.params.enableStickyHeader }\n        enableVirtualMaskRow={ this.props.args.params.enableVirtualMaskRow }\n        enableVirtualization={ this.props.args.params.enableVirtualization }\n        showColumnChooser={ this.props.args.params.showColumnChooser }\n        showColumnMenu={ this.props.args.params.showColumnMenu }\n        childGrid={ this.props.args.params.childGrid }\n        editSettings={ this.props.args.params.editSettings }\n        allowGrouping={ this.props.args.params.allowGrouping } groupSettings={ this.props.args.params.groupSettings }\n        allowPaging={ this.props.args.params.allowPaging } pageSettings={ this.props.args.params.pageSettings }\n        allowFiltering={ this.props.args.params.allowFiltering } filterSettings={ this.props.args.params.filterSettings } \n        allowSorting={ this.props.args.params.allowSorting } sortSettings={ this.props.args.params.sortSettings }\n        searchSettings={ this.props.args.params.searchSettings }\n        selectionSettings={ this.props.args.params.selectionSettings }\n        textWrapSettings={ this.props.args.params.textWrapSettings }\n        allowResizing={ this.props.args.params.allowResizing }\n        height={ this.props.args.params.height }\n        width={ this.props.args.params.width }\n        rowHeight={ this.props.args.params.rowHeight }\n        rowRenderingMode={ this.props.args.params.rowRenderingMode }\n        selectedRowIndex={ this.props.args.params.selectedRowIndex }\n        printMode={ this.props.args.params.printMode }\n        frozenColumns={ this.props.args.params.frozenColumns }\n        gridLines={ this.props.args.params.gridLines }\n        frozenRows={ this.props.args.params.frozenRows }>\n        <ColumnsDirective>\n          {totalColumns}\n        </ColumnsDirective>\n        <Inject services={[Page, Sort, Filter, Group, Toolbar, InfiniteScroll, ExcelExport, PdfExport, Reorder, Resize, RowDD, Edit, Freeze, Search, DetailRow, ColumnChooser, ColumnMenu]} />\n      </GridComponent>\n    )\n  }\n\n}\nexport default withStreamlitConnection(EJ2Grid)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport EJ2Grid from './ej2-grid';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EJ2Grid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}